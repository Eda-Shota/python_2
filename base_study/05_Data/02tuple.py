# タプル
# 複数のデータを格納したり取り出したりするのに向いている
# インデックスやスライスが使えるが、要素の変更・追加は出来ない。
# タプルは基本()で作成する
("burger", 110)
# ただし()を省いても良い。,によりタプルを作成できる
"potato", 150
# 略すか略さないかは、周辺の記法によりける
print("shake", 120) # これはタプルにならず、ただの文字列になる
# 変数へ代入
food = "nuget", 200
food
# 繰り返し処理を利用し、格納する事もできる
tuple(range(10)) # range関数を利用し0~9を格納

# インデックスやスライスも使用可能
food = "burger", 110, 234.5
food
# これらを1つずつ取り出す場合。
food[0]
food[-2]
food[:2]

# なおタプルは内容の変更が不可能。変更が必要の場合は、新たなタプルを作成する

# パッキング
# 今までやっていた格納の事。
food = "burger", 100, 234.5
food
# アンパッキング
# タプルにまとめた複数の要素を分解する。分解し、各変数に格納する。
name, price ,calorie = food
name # burgerが入っている
price
calorie
# 要素の多いタプルをアンパッキングする場合
# *を含める変数を一つだけ含める事が可能。
# 他の変数に含めない要素を*のついた変数にリストとして格納する
alphabet = tuple("ABCDEFG")
first, second, *rest, last = alphabet
first
second
rest
last

# タプルに適用できる代表的な演算子
food_1 = "burger", 100, 123.4
food_2 = "potato", 120, 102.5
coin = 1, 5, 10, 50, 100, 500
food_1+food_2 # タプルを連結
food_1*2 # 要素を複製する
2*food_1 # 上と同様
len(food_1) # 要素の数を数える
min(coin) # 要素の最小値
max(coin) # 要素の最大値
food_1.count(100) # 指定した値に一致する要素の個数
food_1.index(123.4) # 指定した値に一致する先頭に最も近い要素のインデックス

# とあるデータ構造の中に別のデータ構造を入れる事もできる
# リストの中にタプルを入れる事はよくある。
menu = [("burger", 110, 234.5), ("potato", 150, 226.7)]
menu
# この場合は、上位階層はリストなので、新たなタプルを追加できる。
menu.append(("shake", 120, 218.9))
menu
# このような構造の場合、特定の値を抜き出す際にはこのように
name, price, calorie = menu[2]
calorie

# タプルは要素を削除するミスを防ぐことが可能で、高速な処理が期待できる
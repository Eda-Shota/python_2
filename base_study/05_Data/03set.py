# 集合
# 指定した値が含まれるかどうかを瞬時に判定できるデータ構造
# ミュータブルなので要素の追加や変更が出来る
# 同じ値を重複して格納する事は出来ない
# 値を取り出すときの順序は保証されていない
# イミュータブルな値(不変)だけ格納できる
color = {"blue", "red", "green"}
set{} # 空の集合を作る時はこのように
# 集合も同様にイテラブルから集合を作成できる
set(range(16))
# 文字列からも作成できるが、同じ値が複数ある場合は、1つしか格納されない
set("anaconda")

# 集合の特徴である、含まれている値を瞬時に判断できる演算（メンバーシップテスト演算）
"red" in color # 値 in 集合 とすることで含まれているかを判定
"white" not in color # 値 not in 集合 とすることで含まれていないかを判定
# これらは他のデータ構造や文字列にも使用可能
t in "python"
# ログイン機能にも使用可能
login = {("admin", "abc123"), ("guest", "ghi456")}
("guest", "ghi456") in login

# 追加もできるが同じ値は追加できない
color.add("yellow") # 1つ追加する場合
color |= {"black", "gold"} # 複数の値を追加する場合、同値が含まれていない要素だけ追加される
color

# 削除もできる
color.remove("gold") # removeメソッド、対象の値が無い場合、例外が発生する
color.discard("black") # discardメソッド、対象の値がなくても、例外は発生しない
color -= {"yellow", "green"} # 複数の値を削除する事も可能
#また任意の要素や、全ての要素を削除する方法もある
alphabet = set("abcdefg")
alphabet.pop() # 任意の値を削除し、削除した値を返す
alphabet.clear() # 全ての要素が削除される

# 集合に特有の演算を用いる
a = {"blue", "red", "green", "white"}
b = {"blue", "red", "yellow", "black"}
a|b # 和集合(要素を足す)
a&b # 積集合(重複している値を返す)
a-b # 差集合(aからbの要素を引く)
a^b # 対称差(重複していない値を返す)
len(a^b) # 数を数える事も可能
# 集合もイテラブルなので、以下のような利用も可能
"/".join(a) # 文字列にする事も可能
list(a) # リストにする事も可能

# ハッシュ法を用いたデータ構造は、要素の検索が容易
# 一定の法則に基づいてデータを格納するため、受け取った値から同値を探す為に、全ての要素を総当たりする必要が無い
hash("green") # ハッシュを計算する
# ハッシュ法を用いる型はハッシュ計算が可能な値のみ格納できる
# そのためリストは格納できず、タプルは格納できる
# 機械学習には膨大な入力データを扱う必要がある
# 数値データを読み込むNumPyライブラリを使用し、データを読み込んだり、必要なデータを取り出したり、統計量を計算したりする手法を学ぶ

# CSVファイルを配列に読み込む
pip install numpy
import numpy
score = numpy.loadtxt("score.csv", delimiter=",") # 配列 = numpy.loadtxt(ファイル名, delimiter=区切り文字, encoding=文字エンコーディング)　csvファイルを読み込むloadtxt関数
score

# インデックスを使って配列の要素を取得する
score[2][1] # 配列[行のインデックス][列のインデックス] 配列の要素を取得(角括弧を並べる方法)
score[2, 1] # 配列[行のインデックス, 列のインデックス] 配列の要素を取得(タプルを使う方法)
score[2] # 配列[行のインデックス] 配列の行を取得
score[:, 1] # 配列[:, 列のインデックス] 配列の列を取得
score[2:4, 1:3] # 配列[開始行番号:終了行番号, 開始列番号,終了行番号] 配列の指定した範囲を取得(それぞれ後ろに:ステップをつけることで、ステップを指定する事も可能)

# 条件に基づいて配列の要素を取得する
score[score[:, 2] >= 95] # 配列[式] 指定した条件を満たす要素を取得
score[numpy.any(score == 100, 1)] # numpy.any(配列, axis=軸番号) 軸番号をキーワード引数で指定しいずれかの要素がTrueのときにTrueを返す
# 軸番号、もっとも外側の角括弧が軸番号０で、そこから内側に春に従って1，2，3...に対応する

# 統計量を求める 
numpy.mean(score[:, 0], axis=0) # numpy.mean(配列, axis=軸番号) 平均値を求める
numpy.max(score[:, 1], axis=0) # numpy.max(配列, axis=軸番号) 最大値を求める
numpy.min(score[:, 2], axis=0) # numpy.min(配列, axis=軸番号) 最小値を求める